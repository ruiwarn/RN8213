/*
 * @file: Dl645_Front.h
 * @brief: 电能计量前端模块的头文件。
 * @author: [Auto-generated by Roo]
 * @date: 2025/04/11
 * @description: 定义了计量前端相关的枚举、数据结构和函数声明。
 */
#ifndef _DL645_FRONT_H
#define _DL645_FRONT_H

// 条件编译宏，用于定义全局变量或外部引用
#ifdef   _DL645_FRONT_GLOBALS
	#define  DL645FRONT_EXT // 定义为空，表示在本文件中定义全局变量
#else
	#define  DL645FRONT_EXT  extern // 定义为extern，表示在其他文件中引用全局变量
#endif

/**
 * @brief 功率方向枚举类型。
 * 定义了正向和反向功率。
 */
typedef enum{
	POSITIVE		= 0x00, // 正向功率
	INVERSION		= 0x01  // 反向功率
} eDl645Front_Direction_TypeDef;

/**
 * @brief 前端处理标志枚举类型。
 * 定义了前端模块可能的状态标志。
 */
typedef enum{
	FRONT_FLAG_INIT			= 0x01,	// 初始化标志？
	FRONT_FLAG_RN8209RST	= 0x02	// 需要复位计量芯片标志 (RN8209/RN8213)
} eDl645Front_Flag_TypeDef;

/**
 * @brief 前端临时数据结构体。
 * 用于存储从计量芯片读取的原始数据或中间计算结果。
 */
typedef struct
{
    u8		ChkErrCnt;   // 校验和错误计数器
    u32 	Pw[2];       // 存储A相和B相（或总、相）的原始功率读数 (pa, pb)
    u32 	UI[3];       // 存储电流和电压的原始RMS读数 (Ia=UI[0], In=UI[1]?, U=UI[2])
    u16 	Frequency;   // 存储原始频率读数
    u32		Pulse;		 // 本次读取到的新增脉冲数
    u16     Pstart;      // 读取的启动阈值？(用途待确认)
    //---电能脉冲---
    u32		Pulse_Eg;	 // 累计的总脉冲数 (可能未处理常数)
    u32 	PDirect;	 // 存储从状态寄存器读取的原始功率方向位？ (类型为u32似乎不合理，应为eDl645Front_Direction_TypeDef或u8)
    u32 	ChkSum1;	 // 存储从文件或固定位置读取的预期校验和
} sDl645FrontTmp_TypeDef;

/**
 * @brief 前端主数据结构体。
 * 包含公共数据（供其他模块访问）、私有数据和私有参数。
 */
typedef struct
{
	/**
	 * @brief 前端公共数据结构体。
	 * 存储计算和格式化后的计量结果。
	 */
	struct sDl645FrontPubData_TypeDef  {
		u16		U;			    // 电压值 (格式: NNN.N V)
		u32	    Ia;			    // A相电流值 (格式: NNNN.NNNN A? 根据注释可能需要调整)
		u32	    In;             // 零线电流值 (格式同Ia?)
		sDF09	Pw;			    // 瞬时有功功率 (DF09格式)
		u16		Pf;			    // 功率因数 (格式: N.NNN)
		u16		Angle;		    // 相角 (格式: NNN.N 度)
		u16		Frequency;		// 电网频率 (格式: NN.NN Hz)
		u32		PPwave;			// 一分钟有功功率平均值？ (格式: NN.NNNN kW?)
		u8      Chnsel;         // 通道选择标志？ (可能用于选择显示A相或B相数据)
		u16		Temperature;	// 表内温度 (格式: NNN.N °C, 最高位可能表示负号)
		u16		ClockBat;		// 时钟电池电压 (格式: NN.NN V)
		u32		tWorkBat;		// 电池累计工作时间 (单位: 分钟)
		u8		PDirect;		// 功率方向 (eDl645Front_Direction_TypeDef)
		
	    u16    	CfIn; 			// CF脉冲输入电平状态？
	    u8    	CfTime;			// CF脉冲相关计时？
	    u8    	Step;           // 内部处理步骤或状态？
	    u16   	FrontStamp;     // 前端处理时间戳（用于控制执行频率）
	} PubData;
	
	/**
	 * @brief 前端私有数据结构体。
	 * 存储模块内部使用的状态。
	 */
	struct sDl645FrontPriData_TypeDef  {
		u8		Flag;			// 工作异常标志 (eDl645Front_Flag_TypeDef)
	} PriData;
	
	/**
	 * @brief 前端私有参数结构体。
	 * 存储与前端处理相关的配置参数。
	 */
	struct sDl645FrontPriPara_TypeDef  {
		u32	 PConstE;			// 有功电能常数 (从文件读取)
		u16	 Crc;               // 参数校验和？
	} PriPara;
} sDl645Front_TypeDef;

// 函数声明
/**
 * @brief 初始化计量前端模块。
 * @note 读取校准参数并写入计量芯片寄存器(EMU)。
 */
extern	void fnDl645Front_Init(void);

/**
 * @brief 执行计量前端处理任务。
 * @note 读取计量芯片寄存器，计算瞬时量，处理脉冲计数，测量电池电压和温度。
 */
extern	void fnDl645Front_Exec(void);

/**
 * @brief 根据温度补偿电流增益（函数未在此文件中实现）。
 */
extern  void fnFront_TemperIAGain(void);

/**
 * @brief 根据最大电流补偿功率增益（函数未在此文件中实现）。
 */
extern	void fnFront_CurMaxPGain(void);

#endif // _DL645_FRONT_H
