/*
 * @file: Scom.h
 * @brief: 串行通信模块的头文件。
 * @author: [Auto-generated by Roo]
 * @date: 2025/04/11
 * @description: 定义了通信端口管理、协议处理相关的常量、枚举、结构体和函数声明。
 */
#ifndef _SCOM_H
#define _SCOM_H

// 条件编译宏，用于全局变量的定义或声明
#ifdef   _SCOM_GLOBALS
	#define  SCOM_EXT // 定义为空，表示在本文件中定义全局变量
#else
	#define  SCOM_EXT  extern // 定义为extern，表示在其他文件中引用全局变量
#endif

// --- 宏定义 ---
/**
 * @brief 定义通信数据包缓冲区的最大大小。
 */
#define MAX_COMPACK_SIZE	256

// --- 枚举定义 ---
/**
 * @brief 通信状态机标志枚举类型。
 * 定义了数据包接收和发送过程中的各个状态。
 */
typedef enum
{
	SCOMPK_EFLAG_IDLE , 	  // 空闲状态 (未使用)
	SCOMPK_EFLAG_RXHEAD1,   // 等待接收第一个帧头(0x68)
	SCOMPK_EFLAG_RXHEAD2,   // 等待接收第二个帧头(0x68)
	SCOMPK_EFLAG_RXDATALEN, // 等待接收长度字节
	SCOMPK_EFLAG_RXEND,     // 正在接收数据域、校验和、结束符
	SCOMPK_EFLAG_RXFINISH , // 接收完成
	SCOMPK_EFLAG_ANALYSE ,  // 正在分析处理 (未使用)
	SCOMPK_EFLAG_TXSTART ,  // 准备开始发送
	SCOMPK_EFLAG_TXBUSY ,   // 正在发送中
	SCOMPK_EFLAG_TXFINISH , // 发送完成
	SCOMPK_EFLAG_INIT 		// 初始状态或需要重新初始化状态
} eScomFlag_TypeDef;

/**
 * @brief 支持的协议类型枚举。
 */
typedef enum
{
	PTTYEP_DL645A	= 1, // DL/T645-1997 (未使用)
	PTTYEP_DL645B	= 2, // DL/T645-2007
	PTTYEP_PT698	= 3, // DL/T698.45 (未使用)
	PTTYEP_NONE		= 0xFF // 未识别或无有效协议
} ePtType_TypeDef;


/**
 * @brief 通信端口枚举类型。
 * 定义了系统支持的物理通信端口。
 */
typedef enum
{
	SCOM_PORT_RS485A = 0,	// 第一个RS485通信口
	SCOM_PORT_ZBCOM  = 1,	// 载波通信口 (Zigbee COM?)
	SCOM_PORT_IR	 = 2,	// 红外通信口
	SCOM_PORT_MAX	 = 3	// 最大端口数量，用于数组边界
} eScomPort_TypeDef;

// --- 结构体定义 ---
// 设置结构体按1字节对齐
#pragma pack(1)

/**
 * @brief DL/T645-2007协议帧结构体定义。
 * 用于解析接收到的帧或构建要发送的帧。
 */
typedef struct
{
	u8 	Head1;     // 帧起始符1 (固定0x68)
	u8 	Addr[6];   // 终端地址域 (BCD码)
	u8 	Head2;     // 帧起始符2 (固定0x68)
	
	// 控制码 (Ctl) - 使用位域定义
	// u8 Ctl; // 原始字节
	u8	AFN     : 5; // 应用层功能码 (低5位)
	u8	Persist : 1; // 后续帧标志 (bit 5)
	u8	Ack     : 1; // 命令/应答标志 (bit 6, 0:命令/确认, 1:应答/否认)
	u8	Dir     : 1; // 传输方向位 (bit 7, 0:主站->从站, 1:从站->主站)
	
	u8 Len;       // 数据域长度 (字节数)
	
	// 数据域联合结构体
	struct	{
		u8	DI0; // 数据标识符 Byte 0
		u8	DI1; // 数据标识符 Byte 1
		u8	DI2; // 数据标识符 Byte 2
		u8	DI3; // 数据标识符 Byte 3
		u8	Dat[MAX_COMPACK_SIZE - 16]; // 实际数据 + 校验和 + 结束符 (缓冲区大小减去帧头、地址、控制码、长度本身)
	} UDat;
			
	// 注意：校验和(Cs)和结束符(Tail)实际上位于 UDat.Dat 数组的末尾
	// u8	Cs;     // 校验和 (位于 UDat.Dat[Len - 4])
	// u8	Tail;   // 结束符 (固定0x16, 位于 UDat.Dat[Len - 4 + 1])

} sFrmDl645B_TypeDef;

// 恢复默认字节对齐
#pragma pack()

/**
 * @brief 通信端口数据包管理结构体。
 * 每个通信端口对应一个该结构体实例，用于管理该端口的通信状态和缓冲区。
 */
typedef struct
{
	u16		EFlag;			// 当前通信状态 (eScomFlag_TypeDef)
	
    u16 	RxLen;          // 当前接收到的数据长度
    u16  	TxLen;          // 准备发送的数据长度
    u32		TimeOutStamp;   // 超时计时器的时间戳
    u8 		*pTx;           // 指向当前发送数据位置的指针 (用于中断发送)
    
    // 波特率变更相关
    u8		fBps;			// 波特率变更请求标志 (1表示需要变更)
    u8		NewBps;			// 新的波特率特征字 (位掩码)
    u32 	NewBpsStamp;	// 新波特率生效时间戳？ (用途待确认)
    
    // 接收和发送缓冲区
    u8 		RxBuf[MAX_COMPACK_SIZE]; // 接收缓冲区
    u8		TxBuf[MAX_COMPACK_SIZE]; // 发送缓冲区
}sComPack_TypeDef;

// --- 函数声明 ---
/**
 * @brief 控制通信端口发送使能/禁止 (如RS485的DIR引脚)。
 * @param ComPort 端口号。
 * @param EnOrDis 功能状态 (ENABLE/DISABLE)。
 */
extern void fnScomPk_TxEnDis(u8 ComPort , FunctionalState EnOrDis);

/**
 * @brief 初始化指定通信端口。
 * @param ComPort 端口号。
 */
extern void fnScomPk_Init(u8 ComPort);

/**
 * @brief 更改通信端口波特率。
 * @param ComPort 端口号。
 */
extern void fnScomPk_ChangeBps(u8 ComPort);

/**
 * @brief 通信端口主执行函数（状态机）。
 * @param ComPort 端口号。
 */
extern void fnScomPk_Exec(u8 ComPort);

/**
 * @brief 在接收缓冲区中检查并识别有效的协议帧。
 * @param Src 接收缓冲区指针。
 * @param Len 接收数据长度。
 * @param PtType 用于返回识别到的协议类型指针。
 * @return u8* 指向有效帧起始位置的指针，或NULL。
 */
extern u8 *fnPt_Check(u8 *Src , u16 Len , ePtType_TypeDef *PtType);

/**
 * @brief 执行协议处理。
 * @param ComPort 端口号。
 * @return u16 响应帧长度，0表示无响应。
 */
extern u16 fnPt_Exec(u8 ComPort);

/**
 * @brief 初始化所有通信端口。
 */
extern void fnScom_AllInit(void);

#endif // _SCOM_H

//-------------------------------























