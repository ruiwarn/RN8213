/*
 * @file: Dl645B_Com.h
 * @brief: DL/T645-2007通信协议处理模块的头文件。
 * @author: [Auto-generated by Roo]
 * @date: 2025/04/11
 * @description: 定义了DL/T645通信相关的常量、枚举、结构体和函数声明。
 */
#ifndef __DL645B_COM_H
#define __DL645B_COM_H

// 条件编译宏，用于定义全局变量或外部引用
#ifdef   DL645B_COM_GLOBALS
	#define  DL645B_EXT 	// 如果定义了DL645B_COM_GLOBALS，则定义为空（在.c文件中定义全局变量）
#else
	#define  DL645B_EXT  extern // 否则定义为extern（在其他文件中引用全局变量）
#endif

// DL/T645-2007协议相关常量定义
#define	DL645B_FRAME_MAXLEN		195		// 定义协议帧的最大长度
#define DL645B_LEADERCODE		0xFE	// 定义协议帧的前导码
#define DL645B_LEADERCODE_LEN	4		// 定义前导码的长度（字节数）
#define	F_Comm1Event			1		// 定义通信事件标志位（可能用于指示通信活动）

/**
 * @brief DL/T645-2007 协议错误信息枚举类型。
 * 定义了协议处理过程中可能返回的各种错误代码。
 */
typedef enum
{
	DL645B_ERRINFO_MISC      = 0x01, // 其他错误
	DL645B_ERRINFO_DATA      = 0x02, // 数据错误（如格式、范围）
	DL645B_ERRINFO_PSW       = 0x04, // 密码错误/未授权
	DL645B_ERRINFO_BPS       = 0x08, // 通信速率不能更改
	DL645B_ERRINFO_TZONE     = 0x10, // 年时区数超
	DL645B_ERRINFO_POT       = 0x20, // 日时段数超
	DL645B_ERRINFO_FL        = 0x40, // 费率数超
	
	DL645B_ERRINFO_SEQDATA   = 0x80, // 请求数据块序号错
	
	DL645B_ERRINFO_OK        = 0x00  // 操作成功
} eDL645B_ErrInfo_TypeDef;

/**
 * @brief 定义EMU寄存器映射结构体。
 * 用于通过指针访问EMU（计量单元）的寄存器区域。
 * Buf数组的大小（107）需要参考RN8213手册确认是否覆盖所有相关寄存器。
 */
typedef struct {
  __IO uint32_t Buf[107]; // 假设EMU寄存器映射区大小为 107 * 4 字节
} sDl645B_EMU_TypeDef;

/**
 * @brief 定义RTC寄存器映射结构体。
 * 用于通过指针访问RTC（实时时钟）的寄存器区域。
 * Buf数组的大小（32）需要参考RN8213手册确认是否覆盖所有相关寄存器。
 */
typedef struct {
  __IO uint32_t Buf[32]; // 假设RTC寄存器映射区大小为 32 * 4 字节
} sDl645B_RTC_TypeDef;

// 定义访问EMU和RTC寄存器映射区的宏
#define Dl645B_EMUCom             ((sDl645B_EMU_TypeDef     *) EMU_BASE) // EMU寄存器基地址，EMU_BASE需在芯片头文件中定义
#define	Dl645B_RTCCom			  ((sDl645B_RTC_TypeDef     *) RTC_BASE) // RTC寄存器基地址，RTC_BASE需在芯片头文件中定义

// 函数声明
/**
 * @brief 检查DL/T645-2007协议帧的有效性。
 * @param pCheck 指向接收到的帧结构体。
 * @return ErrorStatus SUCCESS表示帧有效，ERROR表示帧无效。
 */
extern   ErrorStatus	fnDl645B_FrameCheck(sFrmDl645B_TypeDef *pCheck);

/**
 * @brief 获取当前变量数据（瞬时量）。
 * @param DI2 数据标识符高字节。
 * @param DI1 数据标识符中字节。
 * @param DI0 数据标识符低字节。
 * @param Dst 指向目标缓冲区的指针。
 * @param Len 指向存储读取长度的变量的指针。
 * @return eDL645B_ErrInfo_TypeDef 错误码，DL645B_ERRINFO_OK表示成功。
 */
extern   eDL645B_ErrInfo_TypeDef fnDl645_GetVar(u8 DI2 , u8 DI1 , u8 DI0 , u8 *Dst , u16 *Len);

/**
 * @brief DL/T645协议执行入口函数。
 * @param ComPort 通信端口号。
 * @param RxFrm 指向接收到的DL/T645帧。
 * @return u16 响应帧的长度，0表示无响应。
 */
extern  u16 fnDl645B_Exec(u8 ComPort , sFrmDl645B_TypeDef *RxFrm);

/**
 * @brief 获取参数信息文件中的数据（主要为日期和时间）。
 * @param DI2 数据标识符高字节。
 * @param DI1 数据标识符中字节。
 * @param DI0 数据标识符低字节。
 * @param Dst 指向目标缓冲区的指针。
 * @param Len 指向存储读取长度的变量的指针。
 * @return eDL645B_ErrInfo_TypeDef 错误码，DL645B_ERRINFO_OK表示成功。
 */
extern	eDL645B_ErrInfo_TypeDef fnDl645_GetParaVar(u8 DI2 , u8 DI1 , u8 DI0 , u8 *Dst , u16 *Len);

/**
 * @brief 获取冻结数据（此函数未在Dl645B_Com.c中实现，可能在其他文件）。
 * @param DI2 数据标识符高字节。
 * @param DI1 数据标识符中字节。
 * @param DI0 数据标识符低字节。
 * @param Seq 冻结序号。
 * @param Dst 指向目标缓冲区的指针。
 * @param Len 指向存储读取长度的变量的指针。
 * @return eDL645B_ErrInfo_TypeDef 错误码。
 */
extern	eDL645B_ErrInfo_TypeDef fnDl645_GetFrz(u8 DI2 , u8 DI1 , u8 DI0 , u8 Seq , u8 *Dst , u16 *Len);

/**
 * @brief 字节数组反转函数。
 * @param Buf 指向要反转的字节数组的指针。
 * @param Len 数组的长度。
 * @return None
 */
extern	void fnDl645B_Inverse(u8 *Buf, u8 Len);

/**
 * @brief 比较设置的时间（不含星期）是否在合法范围内并为BCD码。
 * @param Start Max/Min数组的起始索引。
 * @param Ck 指向要检查的时间数据数组（BCD码）。
 * @param Len 要检查的时间数据长度。
 * @return ErrorStatus SUCCESS表示合法，ERROR表示非法。
 */
extern	ErrorStatus fnDl645B_JudgeClockNoWeek( u8 Start, u8 *Ck, u8 Len );
#endif // __DL645B_COM_H
