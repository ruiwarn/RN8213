/*
 * @file: Dl645_File.h
 * @brief: 定义DL/T645文件系统相关的数据结构、枚举和函数声明。
 * @author: [Auto-generated by Roo]
 * @date: 2025/04/11
 * @description: 此文件定义了存储在非易失性存储器中的参数文件的布局和访问方式。
 *               包括文件ID、文件项ID、偏移地址、长度以及文件默认值。
 */

#ifndef _DL645_FILE_H
#define _DL645_FILE_H

// 条件编译宏，用于定义全局变量或外部引用
#ifdef   _DL645_FILE_GLOBALS
	#define  DL645FILE_EXT // 定义为空，表示在本文件中定义全局变量
#else
	#define  DL645FILE_EXT  extern // 定义为extern，表示在其他文件中引用全局变量
#endif

// 设置结构体按1字节对齐，确保内存布局与预期一致
#pragma pack(1)

// --- 文件内容结构体定义 ---

/**
 * @brief 瞬时变量文件结构体 (用于RAM存储，非文件系统)。
 * 包含电压、电流、功率、功率因数等实时测量值。
 */
typedef struct {
	//---电压---
	sDF07		Ua; // A相电压 (DF07: u16)
	//---火线电流---
	sDF25		Ia; // A相电流 (DF25: u24, 带符号?)
	//---零线电流---
	sDF25		In; // 零线电流 (DF25: u24, 带符号?)
	//---瞬时有功功率---
	sDF09		PPw; // 有功功率 (DF09: u24, 带符号?)
	//---功率因数---
	sDF26		Pf; // 功率因数 (DF26: u16)
	//---相角---
	sDF05		AngleIa; // A相相角 (DF05: s16?)
	//---其他---
	sDF30		Fre; // 电网频率 (DF30: u16)
	sDF07		Temperature; // 表内温度 (DF07: u16, 可能带符号位)
	sDF30		ClockBat; // 时钟电池电压 (DF30: u16)
	sDF27		tWorkBat; // 电池工作时间 (DF27: u32, 单位分钟?)
} sDl645VarFile_TypeDef;

/**
 * @brief 电能脉冲尾数结构体。
 * 用于存储未累加成完整电能值的脉冲数。
 */
typedef struct {
    u32	    PieceEg; // 电能脉冲尾数 (未满一个计数单位的脉冲)
} sEgPiece_TypeDef;

/**
 * @brief 通信参数结构体。
 * 定义了各个通信接口的波特率特征字。
 */
typedef struct {
	u8		Ir1Style;	// 调制型红外口波特率特征字
	u8		Ir2Style;	// 接触型红外口波特率特征字
	u8		Com1Style;	// 通信口1 (RS485A) 波特率特征字
	u8		Com2Style;	// 通信口2 (ZBCOM/载波) 波特率特征字
	u8		Com3Style;	// 通信口3 (IR/红外) 波特率特征字
} sComPara_TypeDef;

/**
 * @brief 显示参数结构体。
 * 定义了LCD显示相关的参数，如轮显/键显项目、时间、小数位数等。
 */
typedef struct {
	u8		nCycDisp;	// 自动轮显的屏数
	u8		DispTime;	// 自动轮显每屏显示时间（秒）
	u8		DecimalEg;	// 显示电能时的小数位数
	u8		DecimalPw;	// 显示功率时的小数位数
	
	u8		nKeyDisp;	// 按键显示的总屏数
	
	u8		CycDispItem[DL645_MAX_CYCDISP][5]; // 自动轮显项目列表 (每个项目5字节，如DI码+属性)
	u8		KeyDispItem[DL645_MAX_KEYDISP][5]; // 按键显示项目列表
	u8		AllOnDispTime;	// 上电全显时间 (秒)
} sDispPara_TypeDef;

/**
 * @brief 通用参数文件结构体。
 * 组合了通信参数和显示参数。
 */
typedef struct {
	sComPara_TypeDef	ComPara; // 通信参数
	sDispPara_TypeDef	DispPara; // 显示参数
} sDl645GeneralParaFile_TypeDef;

/**
 * @brief 高级参数文件结构体。
 * 存储电表的基本信息和重要参数。
 */
typedef struct {
	u8 		PExpression;    // 有功组合方式特征字
	sDF12	ComAddr;		// 通信地址 (6字节BCD)
	sDF12	MeterNo;		// 表号 (6字节BCD)
	sDF10	PConstE;		// 有功电能常数 (3字节BCD)
} sDl645HighParaFile_TypeDef; // 总字节数：1 + 6 + 6 + 3 = 16字节 (注释中的229 Byte有误)

/**
 * @brief 固件/校表参数文件结构体。
 * 存储计量芯片校准所需的各种参数。
 */
typedef struct
{
	u16		SYSCON;    // 系统控制寄存器备份值？
	u16		EMUCON;    // EMU控制寄存器备份值？
	u16		HFConst;   // 高频脉冲常数 (imp/kWh)
	u16		PStart;	   // 有功启动阈值
	u16		QStart;    // 无功启动阈值
	u16		GPQA;      // A通道功率/相位校准值
	u16		GPQB;      // B通道功率/相位校准值
	u16		IAGain;    // A通道电流增益
	u16		UGain;     // 电压增益
	u16		IBGain;    // B通道电流增益
	u16		PhsA;	   // A相相位补偿值
	u16		PhsB;	   // B相相位补偿值
	u16		QPhsCal;   // 无功相位校准值？
	u16		APOSA;     // A通道有功功率偏移补偿
	u16		APOSB;	   // B通道有功功率偏移补偿
	u16		RPOSA;     // A通道无功功率偏移补偿？
	u16		RPOSB;     // B通道无功功率偏移补偿？
	u16		IARMSOS;   // A通道电流有效值偏移
	u16		IBRMSOS;   // B通道电流有效值偏移
	float   KUrms;     // 电压系数 (浮点数)
	float	KIArms;    // A通道电流系数 (浮点数)
	float   KIBrms;    // B通道电流系数 (浮点数)
	float	KPrms;     // 功率系数 (浮点数)
	u32		PStarDisp; // 功率显示阈值？
	u32		IStarDisp; // 电流显示阈值？
	u32		ChkSum;    // 校表参数校验和
	u16		RTCDota0;  // RTC数字校准寄存器值
} sDl645FirmParaFile_TypeDef; // 总字节数：17*2 + 4*4 + 4 + 2 = 34 + 16 + 4 + 2 = 56字节 (注释中的58 Byte有误)

/**
 * @brief NVRAM (非易失性存储器) 参数文件结构体。
 * 存储一些持久化状态信息。
 */
typedef struct {
	u8    	FristPowOn[4]; // 首次上电标志 (固定内容 "1yDB")
	// 以下为各种数据记录的指针（可能用于循环存储）
	u8		pRmEgSh;		// 剩余电量结算记录指针？
	u8		pTimeFrz;		// 定时冻结记录指针
	u8		pWinkFrz;		// 瞬时冻结记录指针
	u8		pDayFrz;		// 日冻结记录指针
	u8		pTZoneSwFrz;	// 时区切换冻结记录指针
	u8		pPOTSwFrz;		// 时段切换冻结记录指针
	u8		pRatePriceSwFrz;// 费率电价切换冻结记录指针
	u8		pLadderSwFrz;	// 阶梯切换冻结记录指针
	u8		pHourFrz;		// 整点冻结记录指针
	u8		pStat;			// 事件状态记录指针？
	u8		pRmApplyEg;		// 购电量应用记录指针？
} sDl645NvRamFile_TypeDef; // 总字节数：4 + 11 = 15字节

#pragma pack() // 恢复默认的字节对齐方式

//=============================================================================
//=== 定义文件项信息枚举 ===
// 每个枚举定义了一个文件内各个数据项的编号、长度和偏移地址。
// 命名规则: Dl645FileItemInfo[Num/Len/OffAddr]_[FileName]_[ItemName]

/**
 * @brief 通用参数文件 (GeneralPara) 文件项信息枚举。
 */
typedef enum{
	// 项编号
	Dl645FileItemInfoNum_GeneralPara_ComPara 	= 0,	// 通信参数
	Dl645FileItemInfoNum_GeneralPara_DispPara 	= 1,	// 显示参数
	Dl645FileItemInfoNum_GeneralPara_Max 	    = 2,	// 文件项总数
	// 项长度
	Dl645FileItemInfoLen_GeneralPara_ComPara 	= (sizeof(sComPara_TypeDef)),
	Dl645FileItemInfoLen_GeneralPara_DispPara 	= (sizeof(sDispPara_TypeDef)),
	// 项偏移地址
	Dl645FileItemInfoOffAddr_GeneralPara_ComPara 	= 0,
	Dl645FileItemInfoOffAddr_GeneralPara_DispPara 	= (Dl645FileItemInfoOffAddr_GeneralPara_ComPara + Dl645FileItemInfoLen_GeneralPara_ComPara),
	Dl645FileItemInfoOffAddr_GeneralPara_End	    = (Dl645FileItemInfoOffAddr_GeneralPara_DispPara + Dl645FileItemInfoLen_GeneralPara_DispPara) // 文件结束偏移
} eDl645FileItemInfo_GeneralPara_TypeDef;

/**
 * @brief 高级参数文件 (HighPara) 文件项信息枚举。
 */
typedef enum{
	// 项编号
	Dl645FileItemInfoNum_HighPara_PExpression  	= 0, // 有功组合方式
	Dl645FileItemInfoNum_HighPara_ComAddr		= 1, // 通信地址
	Dl645FileItemInfoNum_HighPara_MeterNo		= 2, // 表号
	Dl645FileItemInfoNum_HighPara_PConstE		= 3, // 有功常数
	Dl645FileItemInfoNum_HighPara_Max 			= 4, // 文件项总数
	// 项长度
	Dl645FileItemInfoLen_HighPara_PExpression  	= 1,
	Dl645FileItemInfoLen_HighPara_ComAddr		= (sizeof(sDF12)),
	Dl645FileItemInfoLen_HighPara_MeterNo		= (sizeof(sDF12)),
	Dl645FileItemInfoLen_HighPara_PConstE		= (sizeof(sDF10)),
	// 项偏移地址
	Dl645FileItemInfoOffAddr_HighPara_PExpression  	= 0,
	Dl645FileItemInfoOffAddr_HighPara_ComAddr		= (Dl645FileItemInfoOffAddr_HighPara_PExpression + Dl645FileItemInfoLen_HighPara_PExpression),
	Dl645FileItemInfoOffAddr_HighPara_MeterNo		= (Dl645FileItemInfoOffAddr_HighPara_ComAddr + Dl645FileItemInfoLen_HighPara_ComAddr),
	Dl645FileItemInfoOffAddr_HighPara_PConstE		= (Dl645FileItemInfoOffAddr_HighPara_MeterNo + Dl645FileItemInfoLen_HighPara_MeterNo),
	Dl645FileItemInfoOffAddr_HighPara_End 			= (Dl645FileItemInfoOffAddr_HighPara_PConstE + Dl645FileItemInfoLen_HighPara_PConstE) // 文件结束偏移
} eDl645FileItemInfo_HighPara_TypeDef;

/**
 * @brief 固件/校表参数文件 (FirmPara) 文件项信息枚举。
 */
typedef enum{
	// 项编号
	Dl645FileItemInfoNum_FirmPara_SYSCON	= 0,
	Dl645FileItemInfoNum_FirmPara_EMUCON	= 1,
	Dl645FileItemInfoNum_FirmPara_HFConst	= 2,
	Dl645FileItemInfoNum_FirmPara_PStart	= 3,
	Dl645FileItemInfoNum_FirmPara_QStart	= 4,
	Dl645FileItemInfoNum_FirmPara_GPQA		= 5,
	Dl645FileItemInfoNum_FirmPara_GPQB		= 6,
	Dl645FileItemInfoNum_FirmPara_IAGAIN	= 7,
	Dl645FileItemInfoNum_FirmPara_UGAIN		= 8,
	Dl645FileItemInfoNum_FirmPara_IBGAIN	= 9,
	Dl645FileItemInfoNum_FirmPara_PhsA		= 10,
	Dl645FileItemInfoNum_FirmPara_PhsB		= 11,
	Dl645FileItemInfoNum_FirmPara_QPhsCal	= 12,
	Dl645FileItemInfoNum_FirmPara_APOSA		= 13,
	Dl645FileItemInfoNum_FirmPara_APOSB		= 14,
	Dl645FileItemInfoNum_FirmPara_RPOSA		= 15,
	Dl645FileItemInfoNum_FirmPara_RPOSB		= 16,
	Dl645FileItemInfoNum_FirmPara_IARMSOS	= 17,
	Dl645FileItemInfoNum_FirmPara_IBRMSOS	= 18,
	Dl645FileItemInfoNum_FirmPara_KUrms		= 19,
	Dl645FileItemInfoNum_FirmPara_KIArms	= 20,
	Dl645FileItemInfoNum_FirmPara_KIBrms	= 21,
	Dl645FileItemInfoNum_FirmPara_KPrms		= 22,
	Dl645FileItemInfoNum_FirmPara_PStarDisp	= 23,
	Dl645FileItemInfoNum_FirmPara_IStarDisp	= 24,
	Dl645FileItemInfoNum_FirmPara_ChkSum	= 25,
	Dl645FileItemInfoNum_FirmPara_RTCDota0	= 26,
	Dl645FileItemInfoNum_FirmPara_Max		= 27, // 文件项总数
	// 项长度
	Dl645FileItemInfoLen_FirmPara_SYSCON	= (sizeof(u16)),
	Dl645FileItemInfoLen_FirmPara_EMUCON	= (sizeof(u16)),
	Dl645FileItemInfoLen_FirmPara_HFConst	= (sizeof(u16)),
	Dl645FileItemInfoLen_FirmPara_PStart	= (sizeof(u16)),
	Dl645FileItemInfoLen_FirmPara_QStart	= (sizeof(u16)),
	Dl645FileItemInfoLen_FirmPara_GPQA		= (sizeof(u16)),
	Dl645FileItemInfoLen_FirmPara_GPQB		= (sizeof(u16)),
	Dl645FileItemInfoLen_FirmPara_IAGAIN	= (sizeof(u16)),
	Dl645FileItemInfoLen_FirmPara_UGAIN		= (sizeof(u16)),
	Dl645FileItemInfoLen_FirmPara_IBGAIN	= (sizeof(u16)),
	Dl645FileItemInfoLen_FirmPara_PhsA		= (sizeof(u16)),
	Dl645FileItemInfoLen_FirmPara_PhsB		= (sizeof(u16)),
	Dl645FileItemInfoLen_FirmPara_QPhsCal	= (sizeof(u16)),
	Dl645FileItemInfoLen_FirmPara_APOSA		= (sizeof(u16)),
	Dl645FileItemInfoLen_FirmPara_APOSB		= (sizeof(u16)),
	Dl645FileItemInfoLen_FirmPara_RPOSA		= (sizeof(u16)),
	Dl645FileItemInfoLen_FirmPara_RPOSB		= (sizeof(u16)),
	Dl645FileItemInfoLen_FirmPara_IARMSOS	= (sizeof(u16)),
	Dl645FileItemInfoLen_FirmPara_IBRMSOS	= (sizeof(u16)),
	Dl645FileItemInfoLen_FirmPara_KUrms		= (sizeof(float)), // 注意类型是float，长度为4
	Dl645FileItemInfoLen_FirmPara_KIArms	= (sizeof(float)),
	Dl645FileItemInfoLen_FirmPara_KIBrms	= (sizeof(float)),
	Dl645FileItemInfoLen_FirmPara_KPrms		= (sizeof(float)),
	Dl645FileItemInfoLen_FirmPara_PStarDisp	= (sizeof(u32)),
	Dl645FileItemInfoLen_FirmPara_IStarDisp	= (sizeof(u32)),
	Dl645FileItemInfoLen_FirmPara_ChkSum	= (sizeof(u32)),
	Dl645FileItemInfoLen_FirmPara_RTCDota0	= (sizeof(u16)),
	// 项偏移地址 (自动计算)
	Dl645FileItemInfoOffAddr_FirmPara_SYSCON	= 0,
	Dl645FileItemInfoOffAddr_FirmPara_EMUCON	= (Dl645FileItemInfoOffAddr_FirmPara_SYSCON + Dl645FileItemInfoLen_FirmPara_SYSCON),
	Dl645FileItemInfoOffAddr_FirmPara_HFConst	= (Dl645FileItemInfoOffAddr_FirmPara_EMUCON + Dl645FileItemInfoLen_FirmPara_EMUCON),
	Dl645FileItemInfoOffAddr_FirmPara_PStart	= (Dl645FileItemInfoOffAddr_FirmPara_HFConst + Dl645FileItemInfoLen_FirmPara_HFConst),
	Dl645FileItemInfoOffAddr_FirmPara_QStart	= (Dl645FileItemInfoOffAddr_FirmPara_PStart + Dl645FileItemInfoLen_FirmPara_PStart),
	Dl645FileItemInfoOffAddr_FirmPara_GPQA		= (Dl645FileItemInfoOffAddr_FirmPara_QStart + Dl645FileItemInfoLen_FirmPara_QStart),
	Dl645FileItemInfoOffAddr_FirmPara_GPQB		= (Dl645FileItemInfoOffAddr_FirmPara_GPQA + Dl645FileItemInfoLen_FirmPara_GPQA),
	Dl645FileItemInfoOffAddr_FirmPara_IAGAIN	= (Dl645FileItemInfoOffAddr_FirmPara_GPQB + Dl645FileItemInfoLen_FirmPara_GPQB),
	Dl645FileItemInfoOffAddr_FirmPara_UGAIN		= (Dl645FileItemInfoOffAddr_FirmPara_IAGAIN + Dl645FileItemInfoLen_FirmPara_IAGAIN),
	Dl645FileItemInfoOffAddr_FirmPara_IBGAIN	= (Dl645FileItemInfoOffAddr_FirmPara_UGAIN + Dl645FileItemInfoLen_FirmPara_UGAIN),
	Dl645FileItemInfoOffAddr_FirmPara_PhsA		= (Dl645FileItemInfoOffAddr_FirmPara_IBGAIN + Dl645FileItemInfoLen_FirmPara_IBGAIN),
	Dl645FileItemInfoOffAddr_FirmPara_PhsB		= (Dl645FileItemInfoOffAddr_FirmPara_PhsA + Dl645FileItemInfoLen_FirmPara_PhsA),
	Dl645FileItemInfoOffAddr_FirmPara_QPhsCal	= (Dl645FileItemInfoOffAddr_FirmPara_PhsB + Dl645FileItemInfoLen_FirmPara_PhsB),
	Dl645FileItemInfoOffAddr_FirmPara_APOSA		= (Dl645FileItemInfoOffAddr_FirmPara_QPhsCal + Dl645FileItemInfoLen_FirmPara_QPhsCal),
	Dl645FileItemInfoOffAddr_FirmPara_APOSB		= (Dl645FileItemInfoOffAddr_FirmPara_APOSA + Dl645FileItemInfoLen_FirmPara_APOSA),
	Dl645FileItemInfoOffAddr_FirmPara_RPOSA		= (Dl645FileItemInfoOffAddr_FirmPara_APOSB + Dl645FileItemInfoLen_FirmPara_APOSB),
	Dl645FileItemInfoOffAddr_FirmPara_RPOSB		= (Dl645FileItemInfoOffAddr_FirmPara_RPOSA + Dl645FileItemInfoLen_FirmPara_RPOSA),
	Dl645FileItemInfoOffAddr_FirmPara_IARMSOS	= (Dl645FileItemInfoOffAddr_FirmPara_RPOSB + Dl645FileItemInfoLen_FirmPara_RPOSB),
	Dl645FileItemInfoOffAddr_FirmPara_IBRMSOS	= (Dl645FileItemInfoOffAddr_FirmPara_IARMSOS + Dl645FileItemInfoLen_FirmPara_IARMSOS),
	Dl645FileItemInfoOffAddr_FirmPara_KUrms		= (Dl645FileItemInfoOffAddr_FirmPara_IBRMSOS + Dl645FileItemInfoLen_FirmPara_IBRMSOS),
	Dl645FileItemInfoOffAddr_FirmPara_KIArms	= (Dl645FileItemInfoOffAddr_FirmPara_KUrms + Dl645FileItemInfoLen_FirmPara_KUrms),
	Dl645FileItemInfoOffAddr_FirmPara_KIBrms	= (Dl645FileItemInfoOffAddr_FirmPara_KIArms + Dl645FileItemInfoLen_FirmPara_KIArms),
	Dl645FileItemInfoOffAddr_FirmPara_KPrms		= (Dl645FileItemInfoOffAddr_FirmPara_KIBrms + Dl645FileItemInfoLen_FirmPara_KIBrms),
	Dl645FileItemInfoOffAddr_FirmPara_PStarDisp	= (Dl645FileItemInfoOffAddr_FirmPara_KPrms + Dl645FileItemInfoLen_FirmPara_KPrms),
	Dl645FileItemInfoOffAddr_FirmPara_IStarDisp	= (Dl645FileItemInfoOffAddr_FirmPara_PStarDisp + Dl645FileItemInfoLen_FirmPara_PStarDisp),
	Dl645FileItemInfoOffAddr_FirmPara_ChkSum	= (Dl645FileItemInfoOffAddr_FirmPara_IStarDisp + Dl645FileItemInfoLen_FirmPara_IStarDisp),
	Dl645FileItemInfoOffAddr_FirmPara_RTCDota0	= (Dl645FileItemInfoOffAddr_FirmPara_ChkSum + Dl645FileItemInfoLen_FirmPara_ChkSum),
	Dl645FileItemInfoOffAddr_FirmPara_End		= (Dl645FileItemInfoOffAddr_FirmPara_RTCDota0 + Dl645FileItemInfoLen_FirmPara_RTCDota0) // 文件结束偏移
} eDl645FileItemInfo_FirmPara_TypeDef;

/**
 * @brief NVRAM参数文件 (NvRam) 文件项信息枚举。
 */
typedef enum{
	// 项编号
	Dl645FileItemInfoNum_NvRam_FristPowOn 	= 0, // 首次上电标志
	Dl645FileItemInfoNum_NvRam_pFile 		= 1, // 文件指针
	Dl645FileItemInfoNum_NvRam_Max 			= 2, // 文件项总数
	// 项长度
	Dl645FileItemInfoLen_NvRam_FristPowOn	= 4,
	Dl645FileItemInfoLen_NvRam_pFile		= 11, // 存储11个指针？
	// 项偏移地址
	Dl645FileItemInfoOffAddr_NvRam_FristPowOn 	= 0,
	Dl645FileItemInfoOffAddr_NvRam_pFile 		= (Dl645FileItemInfoOffAddr_NvRam_FristPowOn + Dl645FileItemInfoLen_NvRam_FristPowOn),
	Dl645FileItemInfoOffAddr_NvRam_End 			= (Dl645FileItemInfoOffAddr_NvRam_pFile + Dl645FileItemInfoLen_NvRam_pFile) // 文件结束偏移
} eDl645FileItemInfo_NvRam_TypeDef;

//=== 定义文件信息枚举 ===
#define FRAM_SADDR	AT24C256_START_ADDR // FRAM/EEPROM 起始地址宏定义 (AT24C256_START_ADDR需在别处定义)

/**
 * @brief 文件系统文件ID和长度定义枚举。
 */
typedef enum
{
	// 文件编号
	Dl645FileId_NvRam		= 0, // NVRAM参数文件
	Dl645FileId_FirmPara	= 1, // 固件/校表参数文件
	Dl645FileId_HighPara	= 2, // 高级参数文件
	Dl645FileId_GeneralPara	= 3, // 通用参数文件
	Dl645FileId_Max			= 4, // 最大文件ID，用于数组边界检查

	// 文件长度 (根据对应的结构体大小计算)
	Dl645FileLen_NvRam			= (sizeof(sDl645NvRamFile_TypeDef)),
	Dl645FileLen_FirmPara		= (sizeof(sDl645FirmParaFile_TypeDef)),
	Dl645FileLen_HighPara		= (sizeof(sDl645HighParaFile_TypeDef)),
	Dl645FileLen_GeneralPara	= (sizeof(sDl645GeneralParaFile_TypeDef)),
} eDl645FileInfo_TypeDef;

//---- 文件起始地址定义 ----
#define	Dl645FileAddr_FRAM_Start	(FRAM_SADDR) // 文件系统在存储器中的起始地址
#define	Dl645FileAddr_NvRam			(Dl645FileAddr_FRAM_Start) // NVRAM文件起始地址
#define	Dl645FileAddr_FirmPara		(Dl645FileAddr_NvRam + Dl645FileLen_NvRam) // 固件参数文件起始地址
#define	Dl645FileAddr_HighPara		(Dl645FileAddr_FirmPara + Dl645FileLen_FirmPara) // 高级参数文件起始地址
#define	Dl645FileAddr_GeneralPara	(Dl645FileAddr_HighPara + Dl645FileLen_HighPara) // 通用参数文件起始地址

//----------------------------------------------------------
/**
 * @brief 文件项信息结构体。
 * 用于存储单个文件项的偏移地址和长度。
 */
typedef	struct {
  u32 OffAddr; // 文件项在文件内的偏移地址
  u32 Len;     // 文件项的长度（字节）
} sFileItemInfo_TypeDef;

/**
 * @brief 文件信息结构体。
 * 定义了一个文件的元数据，包括起始地址、长度、最大项目数和指向项目信息数组的指针。
 */
typedef	struct {
	u32 StartAddr; // 文件在存储器中的起始地址
	u32 Len;       // 文件的总长度
	u32 MaxItem;   // 文件包含的最大项目数量
	const sFileItemInfo_TypeDef *pItemInfo;	// 指向该文件文件项信息数组的指针
} sDl645FileInfo_TypeDef;

//------------------------ 函数声明 ------------------------
/**
 * @brief 从指定文件读取数据。
 * @param FileId 文件ID。
 * @param OffAddr 文件内偏移地址。
 * @param Dst 目标缓冲区指针。
 * @param Len 读取长度。
 * @return ErrorStatus 操作状态。
 */
extern ErrorStatus fnDl645File_Read(u8 FileId , u32 OffAddr , void *Dst , u32 Len);

/**
 * @brief 向指定文件写入数据。
 * @param FileId 文件ID。
 * @param OffAddr 文件内偏移地址。
 * @param Src 源数据缓冲区指针。
 * @param Len 写入长度。
 * @return ErrorStatus 操作状态。
 */
extern ErrorStatus fnDl645File_Write(u8 FileId , u32 OffAddr , void *Src , u32 Len);

/**
 * @brief 清除指定文件的内容（填充为0）。
 * @param FileId 文件ID。
 * @return ErrorStatus 操作状态。
 */
extern ErrorStatus fnDl645File_Clr(u8 FileId);

/**
 * @brief 读取指定文件中的特定项目。
 * @param FileId 文件ID。
 * @param nItem 文件项编号。
 * @param Dst 目标缓冲区指针。
 * @return ErrorStatus 操作状态。
 */
extern ErrorStatus fnDl645FileItem_Read(u8 FileId , u8 nItem , void *Dst);

/**
 * @brief 向指定文件中的特定项目写入数据。
 * @param FileId 文件ID。
 * @param nItem 文件项编号。
 * @param Src 源数据缓冲区指针。
 * @return ErrorStatus 操作状态。
 */
extern ErrorStatus fnDl645FileItem_Write(u8 FileId , u8 nItem , void *Src);

/**
 * @brief 清除指定文件中的特定项目（填充为0）。
 * @param FileId 文件ID。
 * @param nItem 文件项编号。
 * @return ErrorStatus 操作状态。
 */
extern ErrorStatus fnDl645FileItem_Clr(u8 FileId , u8 nItem);

/**
 * @brief 初始化文件系统（检查首次上电标志并写入默认值）。
 */
extern void fnDl645File_Init(void);

/**
 * @brief 全局文件信息数组。
 */
extern const sDl645FileInfo_TypeDef Dl645FileInfo[];

#endif // _DL645_FILE_H




