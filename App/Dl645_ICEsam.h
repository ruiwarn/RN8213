/*
 * @file: Dl645_ICEsam.h
 * @brief: IC卡/ESAM模块通信处理的头文件。
 * @author: [Auto-generated by Roo]
 * @date: 2025/04/11
 * @description: 定义了与IC卡/ESAM通信相关的常量、数据结构、错误码和函数声明。
 */
#ifndef  _DL645_ICEsam_H
#define  _DL645_ICEsam_H

// 定义IC卡/ESAM通信缓冲区的最大大小
#define MAX_ICEsamCom_SIZE 160

/**
 * @brief IC卡/ESAM通信数据包结构体。
 * 用于存储通信过程中的状态、数据和缓冲区。
 */
typedef struct
{
	u16		EFlag;			// 通信状态标志 (例如，卡插入、处理中等)
    u8 		Len;            // 当前APDU或数据的长度
    u8		Ic_Comm_RxPtr;	// 接收数据缓冲区的当前指针或长度
    u8		EsamRand[8];	// ESAM模块生成的8字节随机数
    u8		CardRand[8];	// IC卡生成的8字节随机数
    u8		CardRst8B[8];	// IC卡复位信息(ATR)的后8字节？ (用途不明确)
    u8		EsamRst8B[8];	// ESAM模块复位信息的后8字节？ (用途不明确)
    u8		PcRand[8];		// PC或远程主机下发的随机数1 (用于认证或密钥分散)
    u8		PcRst8B[8];		// PC或远程主机下发的分散因子 (用于密钥分散)
    u32		TimeOutStamp;   // 通信超时时间戳
    u16		RemoteTime;		// 远程认证允许的时间？
    u16		RemoteDecTime;	// 远程认证剩余时间？
    u8 		Ic_Comm_TxBuf[MAX_ICEsamCom_SIZE]; // 发送缓冲区
    u8 		Ic_Comm_RxBuf[MAX_ICEsamCom_SIZE]; // 接收缓冲区
}sICEsamPack_TypeDef;

/**
 * @brief IC卡读写操作数据暂存缓冲区结构体。
 * 用于在处理卡片业务时临时存储从卡片读取或待写入卡片的数据。
 */
typedef struct
{
	u8	CardPricePara1Buf[270]; // 存储从卡片读取的第1套费率文件内容
	u8	CardPricePara2Buf[270]; // 存储从卡片读取的第2套费率文件内容
	u8	CardParaBuf[18];		// 存储从卡片读取的参数文件内容 (报警金额1/2, 电压/电流变比)
	u8	CardPriceSwitchTime[9];	// 存储从卡片读取的两套分时费率切换时间
	u8	CardMoneyBag[16];		// 存储从卡片读取的钱包文件内容 (0-7:钱包金额, 8-15:购电次数)
	u8	CardUserNo[11];			// 存储从卡片读取的客户编号
	u8	CardUpdataFlag[5];		// 存储从卡片读取的参数更新标志位 (对应eICEsam_UpdateFlag_TypeDef)
}sICEsamReadBuf_TypeDef;

/**
 * @brief ESAM/IC卡参数更新标志位枚举。
 * 用于标识哪些参数需要从卡片更新到表内。
 */
typedef enum
{
	ICEsam_UpdateFlag_Rata1      = 0x01, // 第1套费率需要更新
	ICEsam_UpdateFlag_Rata2      = 0x02, // 第2套费率需要更新
	ICEsam_UpdateFlag_Ladder1    = 0x04, // 第1套阶梯需要更新
	ICEsam_UpdateFlag_Ladder2    = 0x08, // 第2套阶梯需要更新
	// 其他标志位可以根据需要添加
	ICEsam_UpdateFlag_Other      = 0x80, // 其他参数需要更新
	ICEsam_UpdateFlag_None       = 0x00, // 无需更新
}eICEsam_UpdateFlag_TypeDef;

/**
 * @brief IC卡/ESAM操作错误信息枚举。
 * 定义了卡片处理过程中可能出现的各种错误代码。
 */
typedef enum
{
	CARD_PROC_OK		 = 0x00, // 操作成功
	IC_PowerDn_ERR		 = 0x01, // 表计电压过低，无法操作卡片
	IC_ESAM_Operate_ERR	 = 0x02, // 操作ESAM模块时出错（例如通信失败）
	IC_ESAM_RST_ERR		 = 0x03, // ESAM模块复位失败
	IC_IC_RST_ERR		 = 0x04, // IC卡复位失败 (无法获取ATR)
	IC_Auth_Err			 = 0x05, // 内部/外部身份认证失败
	IC_OtherAuth_Err	 = 0x06, // 外部认证错误 (ESAM相关)
	IC_InvalidCard_Err   = 0x07, // 无效卡或未发行卡
	IC_CardType_Err		 = 0x08, // 卡片类型错误 (例如用户卡、参数卡等类型不匹配)
	IC_CardAuth_Err		 = 0x09, // 卡片操作未授权 (例如密钥状态不正确)
	IC_MAC_Err			 = 10,   // MAC (消息认证码) 校验错误
	IC_MeterNo_Err		 = 11,   // 卡内表号与本机表号不匹配
	IC_UserNo_Err		 = 12,   // 卡内客户编号与本机客户编号不匹配
	IC_CardNo_Err		 = 13,   // 卡序列号错误或不匹配
	IC_Frame_Err		 = 14,   // 卡内文件格式不合法
	IC_BuyCard_Err		 = 15,   // 购电卡插入未开户的电表
	IC_RecuitCar_Err	 = 16,   // 补卡插入未开户的电表
	IC_RechargCount_Err  = 17,   // 购电次数错误 (例如小于等于表内记录)
	IC_ReturnFile_Err 	 = 18,   // 卡内返写文件不为空 (可能上次操作未正确完成)
	IC_OtherRW_Err		 = 19,   // 操作卡片过程中的其他读写或通信错误
	IC_Pull_Err			 = 20,   // 卡片在操作过程中被提前拔出
	IC_Regrate_Err       = 21,   // 购电金额超囤积限制
}eICEsam_ErrInfo_TypeDef;

// --- 函数声明 ---
// 以下函数声明了与IC卡/ESAM模块交互的各种操作，具体实现在Dl645_ICEsam.c或其他相关文件中。

// 执行卡片冷复位
extern	ErrorStatus fnICEsam_CardColdReset(u8 CH);
// 读取随机数 (从卡或ESAM)
extern	ErrorStatus fnICEsam_ReadRandom( u8 CH, u8 Len );
// 复位ESAM模块
extern	ErrorStatus fnICEsam_EsamReset( void );
// 执行身份认证/授权过程
extern	ErrorStatus	fnICEsam_Authorization(u8 *Buf);
// 更新运行时文件 - 时钟相关？
extern	ErrorStatus fnICEsam_UpdateRunFile_Clock( void );
// 读二进制文件并进行MAC校验 (ESAM内部?)
extern	ErrorStatus fnICEsam_ReadBin2BinWithMac( u8 Ins, u8 P1, u8 P2, u8 Len );
// 读二进制文件 (从卡或ESAM)
extern	ErrorStatus fnICEsam_ReadBinFile( u8 CH, u8 P1, u8 P2, u8 Len );
// 更新或验证密码/PIN
extern	ErrorStatus fnICEsam_UpdatePSW( u8 P1, u8 P2, u8 *Buf );
// 写二进制文件 (到卡或ESAM)
extern	ErrorStatus fnICEsam_WriteBinFile( u8 CH, u8 P1, u8 P2, u8 Len );
// 更新ESAM二进制文件并进行MAC校验
extern	ErrorStatus fnICEsam_Update_ESAM_Bin_Mac( u8 P1, u8 P2, u8 *Buf, u8 Len );
// 执行远程控制命令
extern	ErrorStatus fnICEsam_RemoteControl( u8 *Buf, u8 Len , u8 P2);
// 读记录文件 (例如，事件记录、冻结记录)
extern	ErrorStatus fnICEsam_ReadRecFile( u8 CH, u8 P1, u8 P2, u8 Len );
// 判断购电金额是否超囤积
extern	ErrorStatus fnICEsam_JugeRegrate(u32 BuyMoney);
// 执行圈存/充值操作
extern	ErrorStatus fnIcEsam_AddMoney(u8 CH ,u8 *Buf );
// IC卡/ESAM处理主流程函数
extern	void fnICEsam_Card_Proc( void );
// ETU (基本时间单位) 延时函数
extern	void fndelayETU(u8 i);
// 购电金额处理？
extern	ErrorStatus fnICEsam_MoneyProc(void);
// 内部/外部认证
extern	ErrorStatus fnICEsam_Auth_In_Out( u8 INS, u8 CH, u8 P2, u8 *BufA );
// 读密钥文件？
extern	ErrorStatus fnICEsam_Read_Kx( u8 CH, u8 Len );
// 钱包初始化
extern	ErrorStatus fnICEsam_MoneyBagInit(void);
// 验证或更新密码？
extern	ErrorStatus fnICEsam_VerifyUpdatePSW(u8 *Buf , u8 Len);
// 选择文件 (根据文件标识符)
extern	ErrorStatus fnICEsam_SelectFile( u8 CH, u8 F1, u8 F2 );
// 硬件远程认证？
extern	ErrorStatus fnICEsam_HW_RemoteAuth( u8 *Buf );
// 写二进制文件并进行MAC校验
extern	ErrorStatus fnICEsam_WriteBinWithMac( u8 CH, u8 P1, u8 P2, u8 Len );
// 远程钱包初始化
extern	ErrorStatus fnICEsam_RemoteMoneyBagInit(void);
// 更新密钥
extern	ErrorStatus fnICEsam_UpdateKey( u8 P1);
// 返写购电金额？
extern	ErrorStatus fnICEsam_ReturnMoney( u8 *Buf );
// 准备APDU命令头
extern	void fnICEsam_RxTxCommhead( u8 inc, u8 com, u8 P1, u8 P2, u8 len);
// 发送和接收完整的APDU帧
extern	ErrorStatus fnICEsam_CardTxRxFrame( u8 CH, u8 Lc, u8 Le );
// 读钱包文件并进行MAC校验
extern	ErrorStatus fnICEsam_ReadMoneyBagWithMac( u8 Ins, u8 P1, u8 P2, u8 Len );
// 更新返写文件
extern	ErrorStatus fnICEsam_Update_BackMoneyFile( u8 P1, u8 P2, u8 *Buf, u8 Len );
// 更新运行时文件？
extern	ErrorStatus fnICEsam_UpdateRunFile(void);

#endif	// _DL645_ICEsam_H
