/*
 * @file: Dl645_Bkgrd.h
 * @brief: 后台任务处理模块的头文件。
 * @author: [Auto-generated by Roo]
 * @date: 2025/04/11
 * @description: 定义了后台任务相关的常量、枚举、结构体和函数声明，
 *               特别是状态标志、活动状态和低功耗管理相关的数据结构。
 */

#ifndef _DL645_BKGRD_H
#define _DL645_BKGRD_H

// 条件编译宏，用于定义全局变量或外部引用
#ifdef   _DL645_BKGRD_GLOBALS
	#define  DL645BKGRD_EXT // 如果定义了_DL645_BKGRD_GLOBALS，则定义为空（在.c文件中定义全局变量）
#else
	#define  DL645BKGRD_EXT  extern // 否则定义为extern（在其他文件中引用全局变量）
#endif

// 后台状态变化标志位定义 (用于 sDl645BkgrdFlag_TypeDef)
#define 	DL645BKGRD_FCHANGE_SECOND    	( (u32)1 << 0)  // 秒变化标志
#define 	DL645BKGRD_FCHANGE_MINUTE   	( (u32)1 << 1)  // 分钟变化标志
#define 	DL645BKGRD_FCHANGE_HOUR      	( (u32)1 << 2)  // 小时变化标志
#define 	DL645BKGRD_FCHANGE_DAY      	( (u32)1 << 3)  // 天变化标志
#define 	DL645BKGRD_FCHANGE_MONTH    	( (u32)1 << 4)  // 月变化标志
#define 	DL645BKGRD_FCHANGE_RMDAY1   	( (u32)1 << 5)  // 结算日1到达标志？
#define 	DL645BKGRD_FCHANGE_RMDAY2   	( (u32)1 << 6)  // 结算日2到达标志？
#define 	DL645BKGRD_FCHANGE_RMDAY3   	( (u32)1 << 7)  // 结算日3到达标志？
#define 	DL645BKGRD_FCHANGE_TIMEFRZ   	( (u32)1 << 8)  // 定时冻结时间到达标志
#define 	DL645BKGRD_FCHANGE_WINKFRZ   	( (u32)1 << 9)  // 瞬时冻结标志？
#define 	DL645BKGRD_FCHANGE_DAYFRZ   	( (u32)1 << 10) // 日冻结时间到达标志
#define 	DL645BKGRD_FCHANGE_TZONEFRZ  	( (u32)1 << 11) // 时区切换冻结标志？
#define 	DL645BKGRD_FCHANGE_POTFRZ   	( (u32)1 << 12) // 时段切换冻结标志？
#define 	DL645BKGRD_FCHANGE_RATEPRICESW  ( (u32)1 << 13) // 费率/电价切换标志
#define 	DL645BKGRD_FCHANGE_LADDERESW  	( (u32)1 << 14) // 阶梯切换标志
#define 	DL645BKGRD_FCHANGE_HOURFRZ  	( (u32)1 << 15) // 整点冻结标志
#define 	DL645BKGRD_FCHANGE_FL			( (u32)1 << 16) // 费率变化标志？
#define 	DL645BKGRD_FCHANGE_INIT   		( (u32)1 << 17) // 初始化完成标志？
#define		DL645BKGRD_FCHANGE_RMYEAR1   	( (u32)1 << 18) // 年结算日1到达标志？
#define		DL645BKGRD_FCHANGE_RMYEAR2   	( (u32)1 << 19) // 年结算日2到达标志？
#define		DL645BKGRD_FCHANGE_RMYEAR3   	( (u32)1 << 20) // 年结算日3到达标志？
#define		DL645BKGRD_FCHANGE_RMYEAR4   	( (u32)1 << 21) // 年结算日4到达标志？
#define		DL645BKGRD_FCHANGE_XiugaiClock   ( (u32)1 << 22) // 时钟被修改标志
#define		DL645BKGRD_FCHANGE_T500MS    	 ( (u32)1 << 23) // 500ms定时标志
#define 	DL645BKGRD_FCHANGE_POT			( (u32)1 << 24) // 时段切换标志？

//----------------------------------------------------------
// 定义非活动状态机的状态常量
#define End_State           0x0 // 结束/休眠状态
#define Start_State         0x1 // 开始/初始化状态
#define Running_State    	0x2 // 运行/唤醒状态

/**
 * @brief 后台状态标志位结构体定义。
 * 使用位域来表示各种状态和事件标志。
 */
typedef struct {
	u8	Second : 1;      // 秒变化
	u8	Minute : 1;      // 分钟变化
	u8 	Hour : 1;        // 小时变化
	u8 	Day : 1;         // 天变化
	u8 	Month : 1;       // 月变化
	u8 	RmDay1 : 1;      // 结算日1
	u8 	RmDay2 : 1;      // 结算日2
	u8 	RmDay3 : 1;      // 结算日3
	u8 	TimeFrz : 1;     // 定时冻结
	u8 	WinkFrz : 1;     // 瞬时冻结
	u8 	DayFrz : 1;      // 日冻结
	u8 	TZoneFrz : 1;    // 时区冻结
	u8 	POTFrz : 1;      // 时段冻结
	u8 	RatePriceSw : 1; // 费率电价切换
	u8 	LaddereSw : 1;   // 阶梯切换
	u8 	HourFrz : 1;     // 整点冻结
	u8 	FL : 1;          // 费率变化？
	u8	INIT : 1;        // 初始化？
	u8	RmYear1 : 1;     // 年结算日1
	u8	RmYear2 : 1;     // 年结算日2
	u8	RmYear3 : 1;     // 年结算日3
	u8	RmYear4 : 1;     // 年结算日4
	u8 	XiugaiClock: 1;  // 时钟修改
	u8 	t500ms: 1;       // 500ms定时
	u8	POT : 1;         // 时段切换？
} sDl645BkgrdFlagBit_TypeDef;		//后台状态标志字

/**
 * @brief 后台状态标志联合体定义。
 * 允许通过32位整数或位域结构体访问状态标志。
 */
typedef union {
	u32							Flag;    // 32位整数访问
	sDl645BkgrdFlagBit_TypeDef	FlagBit; // 位域访问
} sDl645BkgrdFlag_TypeDef;

//----------------------------------------------------------
/**
 * @brief 后台活动状态枚举类型。
 * 定义了后台任务模块的主要运行状态。
 */
typedef enum{
	BKGRD_ACTIVE_POWON			= 0x00, // 正常工作状态
	BKGRD_ACTIVE_POWDN			= 0x01, // 掉电/休眠状态
	BKGRD_ACTIVE_POWUP			= 0x02, // 上电恢复过程中
} eDl645Bkgrd_Active_TypeDef;
	
//------------------------------------------------------------
/**
 * @brief 后台任务数据结构体定义。
 * 包含公共数据、私有数据和私有参数。
 */
typedef struct {
	/**
	 * @brief 后台公共数据结构体。
	 * 其他模块可以访问的数据。
	 */
	struct sDl645PubData_TypeDef {
		u8  	Active;       		// 当前活动状态 (eDl645Bkgrd_Active_TypeDef)
		u16   	PownUpingDelay;		// 上电恢复过程中的延时计数器
		sDl645BkgrdFlag_TypeDef	fChange; // 后台状态变化标志 (sDl645BkgrdFlag_TypeDef)
		u8      CommStatus; 		// 通信状态标志 (例如 F_Comm1Event)
		u8 		Second;     		// 当前秒数（由主循环或中断更新）
		u16 	ClockPiece;  		// 时钟片段计数？（用途待确认）
		u16     SecondSysStamp;		// 秒级系统时间戳？
	} PubData;

	/**
	 * @brief 后台私有数据结构体。
	 * 仅供后台模块内部使用，用于比较时间变化。
	 */
	struct sDl645PriData_TypeDef {
		u8 		Second;			// 上次记录的秒数
		u8 		Minute;			// 上次记录的分钟数
		u8 		Hour;			// 上次记录的小时数
		u8 		Day;			// 上次记录的天数
		u8 		Month;			// 上次记录的月份
		u8 		Fl;             // 当前费率？
		u8   	nPOT;           // 当前时段？
	} PriData; // 用于存储上一秒的时间信息，以检测时间变化

	/**
	 * @brief 后台私有参数结构体（当前只有一个CRC）。
	 */
	struct sDl645PriPara_TypeDef {
		u16		Crc;           // 参数校验和？
	} PriPara;
	
} sDl645Bkgrd_TypeDef;

/**
 * @brief 系统非活动状态（低功耗）管理数据结构体定义。
 */
typedef  struct
{
	/**
	 * @brief 非活动状态公共数据。
	 */
	struct sDl645PubData_Type
	{
		u8	ActiveState;   // 当前非活动状态 (End_State, Start_State, Running_State)
		u8	ActiveInit;    // 唤醒时是否已初始化标志
		u16	ActiveStamp;   // 休眠唤醒后的活动时间戳（用于超时返回休眠）
		u16	InactiveStamp; // 非活动状态时间戳？（用途待确认）
		u32 BatteryTimer;  // 休眠期间电池供电时间累计
		u16	BatteryTimerCrc; // 电池时间校验和
		u8  PowDnSec;	   // 检测到低于临界电压的持续时间（秒）？
		u8	PowerErrFlag;  // 电源异常标志
	} PubData;
	
	/**
	 * @brief 非活动状态相关标志。
	 */
	struct sDl645Flag_Type
	{
		u8	ExeFlag;       // 执行标志？
		u8	SleepFlag;     // 休眠标志？
		u32 EventFlag;     // 事件标志？
		u8	fChange;       // 变化标志: bit 0 (0x01) 按键按下, bit 1 (0x02) 秒进位
	} InactiveFlag;
} sD645Inactive_TypeDef;

// 上电恢复过程延时时间定义（单位：ms? 需要结合fnStamp_Through确认）
#define PownUpingDelayTime       10 // 默认延时10个单位

//-------------------------------------------------------------
// 函数声明
extern void fnDl645Bkgrd_Init(void); // 后台模块初始化
extern void fnDl645Bkgrd_Exec(void); // 后台任务执行主函数
extern void fnDl645Bkgrd_Inactive(void); // 处理非活动状态（低功耗管理）
extern void fnDl645Bkgrd_JudgeAlarm(void); // 判断告警状态（函数未在.c中实现）
extern void fnDl645Bkgrd_Sleep(void); // 执行WFI进入睡眠
extern void fnDl645Bkgrd_SleepWakeupDisp(void); // 处理按键唤醒后的显示
extern void fnDl645Bkgrd_SleepRefreshDisp(void); // 处理休眠状态下的定时显示刷新
extern u8 fnDl645Bkgrd_LVDCheck(void); // 低电压检测检查
extern void fnDl645Bkgrd_SleepSet(void); // 配置系统进入休眠
extern void fnDl645Bkgrd_AfterPowerDn(void); // 掉电后处理（函数未在.c中实现）
extern ErrorStatus fnDl645Bkgrd_SetCipherKey(void); // 设置密钥（函数未在.c中实现）
extern	void fnDl645Bkgrd_GetFl(void); // 获取费率（函数未在.c中实现）
//-------------------------------------------------------------

//-------------------------------------------------------------


#endif // __DL645_BKGRD_H













